Файлы проекта
=============

DoDoc_Notification.py
    - скрипт создания Извещения
DoDoc_TT.py
    - скрипт создания ТТ
odg2png.py
    - конвертер формата odg в png
odt2pdf.py
    - конвертер формата odt в pdf
Template.py
    - класс обработки xml-шаблонов
OpenOffice_document.py
    - вспомогательные классы для работы с OpenOffice
import_uno.py
    - импортер UNO
paradox.py
    - класс для работы с БД Paradox


Template.py
===========

функция setAttributes
    - устанавливает аттрибуты для узла XML DOM

функция iterNode
    - проходит по всем узлам XML DOM и вызывает методы callback-объекта

класс Template
    - обработчик XML шаблона, метод render возвращает результат подстановки
      параметров в шаблон

класс Template_handler
    - основной SAX-обработчик. Подставляет параметры в шаблон и использует
      хэндлеры для обработки "сложных" тэгов, таких, как таблицы и рисунки.

класс Tag_handler
    - абстрактный класс, определяющий интерфейс хэндлеров

класс Row_handler
    - Хэндлер для строк таблиц (тэг table:row)

класс Image_handler
    - Хэндлер для изображений (тэг draw:image)

класс Parameters_finder
    - ищет подстановочные слова в узле XML DOM

класс Replacer
    - Подставляет параметры в узел XML DOM

Также в файле расположено несколько тестовых функций, проверяющих некоторый функционал.


DoDoc_TT.py
===========

класс Parameters_parser
    - разбирает входной xml файл, содержащий описание параметров.

функция parseParameters
    - возвращает результат работы класса Parameters_parser

функция basefilename
    - возвращает имя файла без пути и расширения

функция renderTemplate
    - создает новый odt файл на основе шаблона, картинок и словаря подстановочных параметров

функция replaceManifest
    - вставляет в Manifest.xml список картинок

функция cleanPictures
    - удаляет из odt архива не использованные картинки

функция main
    - вызывает описанные выше функции в соответствии с переданными в командной строке параметрами


Правила составления входных XML-файлов
======================================

Входные XML-файлы должны использовать кодировку UTF-8.

Подстановочные параметры шаблонов бывают трех типов:
1.  Замена. Оформляется в виде одного xml-узла без потомков.
    Например:
        <func_name>bik_subs</func_name>
2.  Таблица. Оформляется в виде xml-узла с аттрибутом и потомками. Аттрибут должен быть:
        type="table"
    Потомки представляют собой элементы row, содержащие узлы с названиями, соответствующими
    маркерам подстановки в ODF шаблоне.
    Например:
        <row>
            <id>1</id>
            <name>chislo</name>
        </row>
3.  Изображение. Оформляется в виде xml-узла с аттрибутом и потомками. Аттрибут должен быть:
        type="image"
    Потомки представляют собой элементы image, содержащие путь к файлу изображения.
    Например:
        <image>svbsa101k2_1.png</image>
    Растровые изображения должны иметь формат .PNG. Изображения, переданные в формате ODG будут
    автоматически сконвертированы в серию .PNG (по одному на страницу).


Правила составления шаблонов
============================

Макеры подстановки имеют вид {<имя_маркера>}. Например:
    {siam_id}

В маркерах подстановки рекомендуется использовать только символы латинского алфавита в нижнем регистре, цифры и символ подчеркивания.

Форматирование, примененное к маркеру будет применено к подставленным данным. Запрещается использовать различное форматирование внутри маркера.

Маркеры подстановки для строк таблиц имеют вид {<имя_таблицы>.<имя_элемента>}. Например:
    {variables.name}

Для подстановки изображения необходимо вставить любой .png файл и дать ему название, соответствующее данным (фигурные скобки не ставятся).
Размеры подставленного изображения будут такими же, что и у маркерного.

В шаблоне можно использовать условное включение блоков. Для этого надо вставить в документ раздел с именем следующего формата.
    have_<имя_маркера>
для того, чтобы раздел отображался только при наличии данных во входном XML-файле с именем <имя_маркера>.
    have_no_<имя_маркера>
для того, чтобы раздел отображался только при отсутствии данных с именем <имя_маркера>.
Если необходимо вставить несколько разделов, в зависимости от одних данных, допускается дописывать к названию раздела через пробел
уникальные суффиксы. Например:
    have_title 1
    have_title 2
    have_title 3
